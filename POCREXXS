/* REXX */
/* THIS REXX CAN RESPOND TO THE OPERATOR STOP COMMAND.      */
/* THIS REXX CAN INCLUDE OPTIONAL DEBUG CODE WITH %INCLUDE  */
/* THIS REXX CAN GENERATE XML FROM EMP SAMPLE DB2 TABLE     */
/* THIS REXX CAN OPTIONALLY MEASURE ITS CPU USAGE           */
/* THIS REXX CAN OPTIONALLY SEND THE XML WITH SOCKETS       */

/* CHANGE THIS TO YOUR OWN ENVIRONMENT ------------------------- */
db2sys = 'DB9G'
db2own = 'DSN8910'
server = 'httpbin.org'
port = '80'
/* CHANGE THIS TO YOUR OWN ENVIRONMENT ------------------------- */

CRLF = '0D25'x              /* this will translate to ascii 0d0a */
A_CRLF = '0D0A'x                                   /* ascii 0d0a */

sysdate = ''
systime = ''
/*%sysdate */
/*%systime */
msg_c = 'Compilation date='sysdate' Compilation time='systime
say msg_c

/*%INCLUDE POCDB2B */

date_template = 'YYYY-MM-DD HH24:MI:SS'      /* to_char template */

call connectToDb2

call getXML

/*
/*%INCLUDE POCSOCA */
say xmltosend
/*%INCLUDE POCSOCB */
*/

/*%INCLUDE POCSOCB */
call sendXML
do while recvResults()
end
call closeSocket
/*%INCLUDE POCSOCA */

/*%INCLUDE POCDB2A */

Do forever
  IF ShouldWeStop() THEN LEAVE
  /* sleep 5 seconds */
  ADDRESS SYSCALL 'sleep 5'
End

/*%INCLUDE POCDB2B */
call disconnectFromDb2
/*%INCLUDE POCDB2A */

exit 0

ShouldWeStop:
NUMERIC DIGITS 24
CVT=STORAGE(10,4)
PSATCB=STORAGE(D2X(C2D(CVT)),4)
CURRTCB=STORAGE(D2X(C2D(PSATCB)),4)
TCBJSCB=STORAGE(D2X(C2D(CURRTCB)+X2D(B4)),4)
CSCB=STORAGE(D2X(C2D(TCBJSCB)+X2D(100)),4)
/*
/*%INCLUDE POCDBGA */
SAY STORAGE(D2X(C2D(CSCB)+X2D(D8)),4)/*DISPLAY CSCB EYECATCHER */
/*%INCLUDE POCDBGB */
*/
CSCX=STORAGE(D2X(C2D(CSCB)+X2D(DC)),4)
/*
/*%INCLUDE POCDBGA */
SAY STORAGE(D2X(C2D(CSCX)),4)        /*DISPLAY CSCX EYECATCHER */
/*%INCLUDE POCDBGB */
*/
CIB=STORAGE(D2X(C2D(CSCX)+X2D(C)),4)
IF C2D(CIB) <> 0 THEN DO
   /* if we are running as STC, skip the start CIB */
   CIBVERB = C2D(STORAGE(D2X(C2D(CIB)+X2D(4)),1))
   IF CIBVERB = 4 THEN
      CIB=STORAGE(D2X(C2D(CIB)),4)
END

IF C2D(CIB) <> 0 THEN DO
/*
/*%INCLUDE POCDBGA */
    SAY 'NEW CIB FOUND!'
/*%INCLUDE POCDBGB */
*/
  CIBVERB = C2D(STORAGE(D2X(C2D(CIB)+X2D(4)),1))
  IF CIBVERB = 64 THEN DO
     /* a STOP CIB was found */
     SAY 'STOP command received.'
     Return 1
  END
END
/* no STOP CIB found */
ELSE Return 0

/*%INCLUDE POCDB2B */
connectToDb2:

/* try DB2 connection */
subcom dsnrexx
if rc <> 0 then
S_RC = RXSUBCOM('ADD','DSNREXX','DSNREXX')

subcom dsnrexx
if rc = 0 then
 say 'DSNREXX available for DB2 connection'
else do
 say 'DSNREXX not available for DB2 connection'
 say 'Terminating...'
 EXIT 16
end

do i = 1 to 30
 ADDRESS DSNREXX "CONNECT" db2sys
 if rc<> 0 then do
  say 'DB2 subsystem 'db2sys' not yet active...'
  ADDRESS SYSCALL 'sleep 60'
  if ShouldWeStop() then do
   say 'STOP command received, ending...'
   exit 0
  end
 end
 else leave
end

if rc<> 0 then do
 say 'Connect to 'db2sys' DB2 subsystem failed'
 say 'Terminating...'
EXIT 16
end
else
 say 'Connect to 'db2sys' DB2 subsystem ok'
return

disconnectFromDb2:

ADDRESS DSNREXX "DISCONNECT"
if rc = 0 then
 say 'Disconnect from 'db2sys' DB2 subsystem ok'
else signal db2error
return

getXML:
/*
/*%INCLUDE POCCPUA */
 cpu=sysvar('SYSCPU')
 say 'Calling getXML, cpu so far: 'cpu
/*%INCLUDE POCCPUB */
*/

SQLSTMT = ,
"SELECT ",
" XMLSERIALIZE(",
"  XMLDOCUMENT(",
"   XMLELEMENT(",
"    NAME ""results"",",
"    XMLELEMENT(NAME ""updated_at"",",
"    to_char(CURRENT TIMESTAMP,",
"            '"date_template"')),",
"    XMLELEMENT(NAME ""employees"",",
"     ( SELECT",
"       XMLAGG(",
"        XMLELEMENT(NAME ""employee"",",
"         XMLFOREST(",
"          E.EMPNO as ""employee_number"",",
"          E.FIRSTNME as ""first_name"",",
"          E.MIDINIT as ""mid_init"",",
"          E.LASTNAME as ""last_name"",",
"          E.HIREDATE as ""hire_date"",",
"          E.BIRTHDATE as ""birth_date"" OPTION EMPTY ON NULL",
"         ),",                          /* this ends the XMLFOREST */
"         XMLELEMENT(NAME ""projects"",",
"         ( SELECT",
"           XMLAGG(",
"            XMLELEMENT(NAME ""project"",",
"             XMLFOREST(",
"              EP.PROJNO as ""project_number"",",
"              EP.ACTNO as ""activity_number"",",
"              EP.EMPTIME as ""proportion_time"",",
"              EP.EMSTDATE as ""activity_start_date"",",
"              EP.EMENDATE as ""activity_start_date""",
"             )",                       /* this ends the XMLFOREST */
"            )",             /* this ends the XMLELEMENT "project" */
"           ORDER BY EP.PROJNO, EP.ACTNO",
"           )",                            /* this ends the XMLAGG */
"          FROM "db2own".EMPPROJACT EP",
"          WHERE E.EMPNO = EP.EMPNO",
"         )",                    /* this ends the SELECT statement */
"         )",               /* this ends the XMLELEMENT "projects" */
"        )",                /* this ends the XMLELEMENT "employee" */
"        ORDER BY E.LASTNAME, E.FIRSTNME",
"       )",                                /* this ends the XMLAGG */
"       FROM "db2own".EMP E",
"       )",                      /* this ends the SELECT statement */
"    )",                   /* this ends the XMLELEMENT "employees" */
"   )"                       /* this ends the XMLELEMENT "results" */
/*
/*%INCLUDE POCSOCA */
SQLSTMT = SQLSTMT ,
"  ) AS CLOB(1M) INCLUDING XMLDECLARATION"     /* ends XMLDOCUMENT */
/*%INCLUDE POCSOCB */
*/
/* this construction will output BLOB if socket functionality is
   used or a CLOB if socket functionality is disabled */
/*%INCLUDE POCSOCB */
SQLSTMT = SQLSTMT ,
"  ) AS BLOB(1M) INCLUDING XMLDECLARATION"     /* ends XMLDOCUMENT */
/*%INCLUDE POCSOCA */
SQLSTMT = SQLSTMT ,
" )",                                         /* ends XMLSERIALIZE */
" FROM SYSIBM.SYSDUMMY1"
 ADDRESS DSNREXX EXECSQL "SET CURRENT PACKAGESET='DSNREXUR'"
 if rc <> 0 then signal db2error
 ADDRESS DSNREXX EXECSQL "DECLARE C1 CURSOR FOR S1"
 if rc <> 0 then signal db2error
 ADDRESS DSNREXX EXECSQL "PREPARE S1 INTO :OUTSQLDA FROM :SQLSTMT"
 if rc <> 0 then signal db2error
 ADDRESS DSNREXX EXECSQL "OPEN C1"
 if rc <> 0 & rc <> 1 then signal db2error
 ADDRESS DSNREXX EXECSQL "FETCH C1 USING DESCRIPTOR :OUTSQLDA"
 if rc <> 0 then signal db2error
 xmltosend = OUTSQLDA.1.SQLDATA
 ADDRESS DSNREXX EXECSQL "CLOSE C1"
 if rc <> 0 & rc <> 1 then signal db2error

/*
/*%INCLUDE POCCPUA */
 cpu=sysvar('SYSCPU')
 say 'Ending getXML, cpu so far: 'cpu
/*%INCLUDE POCCPUB */
*/
return

db2error:
SAY
SQLERRML = X2C(D2X(LENGTH(SQLERRMC),4))
SQLERRD1 = X2C(D2X(SQLERRD.1,8))
SQLERRD2 = X2C(D2X(SQLERRD.2,8))
SQLERRD3 = X2C(D2X(SQLERRD.3,8))
SQLERRD4 = X2C(D2X(SQLERRD.4,8))
SQLERRD5 = X2C(D2X(SQLERRD.5,8))
SQLERRD6 = X2C(D2X(SQLERRD.6,8))
SQLERRDT = SQLERRD1||SQLERRD2||SQLERRD3||SQLERRD4||SQLERRD5||SQLERRD6
SQLWT = SQLWARN.0||SQLWARN.1||SQLWARN.2||SQLWARN.3||SQLWARN.4
SQLWT = SQLWT||SQLWARN.5||SQLWARN.6||SQLWARN.7||SQLWARN.8||SQLWARN.9
SQLWT = SQLWT||SQLWARN.10||SQLSTATE
SQLC = X2C(D2X(SQLCODE,8))
SQLCA = 'SQLCA   'X2C(00000088)SQLC||SQLERRML||SUBSTR(SQLERRMC,1,70)
SQLCA = SQLCA||SQLERRP||SQLERRDT||SQLWT
TIAR_MSG = X2C(0190)COPIES(' ',400)
TEXT_LEN = X2C(00000050)
ADDRESS ATTCHPGM 'DSNTIAR SQLCA TIAR_MSG TEXT_LEN'
SAY SUBSTR(TIAR_MSG,4,79)
SAY SUBSTR(TIAR_MSG,84,79)
SAY SUBSTR(TIAR_MSG,164,79)
SAY SUBSTR(TIAR_MSG,244,79)
SAY SUBSTR(TIAR_MSG,324,79)
EXIT 16
/*%INCLUDE POCDB2A */

/*%INCLUDE POCSOCB */
sendXML:
/*
/*%INCLUDE POCCPUA */
 cpu=sysvar('SYSCPU')
 say 'Calling sendXML, cpu so far: 'cpu
/*%INCLUDE POCCPUB */
*/
srv = Socket('Initialize', 'wget')
parse var srv src

srv= Socket('Socket')
parse var srv src ssockid

If src > 0
  then do
   msg = 'Generating socket returned' srv '. Aborting....'
   say msg
  return 8
End

srv = Socket('Setsockopt',ssockid,'SOL_SOCKET','SO_LINGER','OFF')
parse var srv src

/* set ascii translation on */
srv = Socket('Setsockopt',ssockid,'SOL_SOCKET','SO_ASCII','ON')
parse var srv src

srv = Socket('Connect',ssockid,'AF_INET' port server)
parse var srv src

If src > 0
  then do
   msg = 'Connect to 'server' returned' srv '. Aborting....'
   say msg
  return 8
End

/* this block will send post headers */
httpget = 'POST /post HTTP/1.1 ' CRLF
srv = Socket('Send',ssockid,httpget)

httpget = 'Accept: application/xml' CRLF
srv = Socket('Send',ssockid,httpget)

httpget = 'Content-Type: application/xml' CRLF
srv = Socket('Send',ssockid,httpget)
len = length(xmltosend)

httpget = 'Content-Length: ' || len CRLF
srv = Socket('Send',ssockid,httpget)

httpget = 'Host:' server':'port CRLF
srv = Socket('Send',ssockid,httpget)

srv = Socket('Send',ssockid,CRLF)

/* set ASCII translation off, because the BLOB is already UTF8 */
srv = Socket('Setsockopt',ssockid,'SOL_SOCKET','SO_ASCII','OFF')
parse var srv src
srv = Socket('Send',ssockid,xmltosend)
srv = Socket('Send',ssockid,A_CRLF)
parse var srv src len

/* set ASCII translation back on so we can receive a result */
srv = Socket('Setsockopt',ssockid,'SOL_SOCKET','SO_ASCII','ON')
parse var srv src

/*  Non-Blocking IO      */
srv = Socket('Ioctl',ssockid,'FIONBIO','ON' )
parse var srv src

return

recvResults:
srv = Socket('Recv',ssockid)
parse var srv src len data
/* there is no data yet and we are in nonblocking io mode */
if len = 'ECONNRESET' then return 0
if len = 'EWOULDBLOCK' then return 1
Say 'Server returned (headers)' len 'bytes of data:'
Say 'data>>'
Say data
return 1

closeSocket:
srv = Socket('Close',ssockid)
return

/*
/*%INCLUDE POCCPUA */
 cpu=sysvar('SYSCPU')
 say 'Ending sendXML, cpu so far: 'cpu
/*%INCLUDE POCCPUB */
*/
return 0
/*%INCLUDE POCSOCA */
